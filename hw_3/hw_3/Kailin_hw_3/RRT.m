%***************************************
%Author: Chaoqun Wang
%Date: 2019-10-15
%***************************************
%% æµ?ç¨‹åˆ?å§‹åŒ–
clear all; close all;
x_I=1; y_I=1;           % è®¾ç½®åˆ?å§‹ç‚¹
x_G=700; y_G=700;       % è®¾ç½®ç›®æ ‡ç‚¹
Thr=50;                 %è®¾ç½®ç›®æ ‡ç‚¹é˜ˆå€¼
Delta= 30;              % è®¾ç½®æ‰©å±•æ­¥é•¿
%% å»ºæ ‘åˆ?å§‹åŒ–
T.v(1).x = x_I;         % Tæ˜¯æˆ‘ä»¬è¦?å?šçš„æ ‘ï¼Œvæ˜¯èŠ‚ç‚¹ï¼Œè¿™é‡Œå…ˆæŠŠèµ·å§‹ç‚¹åŠ å…¥åˆ°Té‡Œé?¢æ?¥
T.v(1).y = y_I; 
T.v(1).xPrev = x_I;     % èµ·å§‹èŠ‚ç‚¹çš„çˆ¶èŠ‚ç‚¹ä»?ç„¶æ˜¯å…¶æœ¬èº«
T.v(1).yPrev = y_I;
T.v(1).dist=0;          %ä»Žçˆ¶èŠ‚ç‚¹åˆ°è¯¥èŠ‚ç‚¹çš„è·?ç¦»ï¼Œè¿™é‡Œå?¯å?–æ¬§æ°?è·?ç¦»
T.v(1).indPrev = 0;     %
%% å¼€å§‹æž„å»ºæ ‘â€”â€”ä½œä¸šéƒ¨åˆ†
figure(1);
ImpRgb=imread('newmap.png');
Imp=rgb2gray(ImpRgb);
imshow(Imp)
xL=size(Imp,1);%åœ°å›¾xè½´é•¿åº¦
yL=size(Imp,2);%åœ°å›¾yè½´é•¿åº¦
hold on
plot(x_I, y_I, 'ro', 'MarkerSize',10, 'MarkerFaceColor','r');
plot(x_G, y_G, 'go', 'MarkerSize',10, 'MarkerFaceColor','g');% ç»˜åˆ¶èµ·ç‚¹å’Œç›®æ ‡ç‚¹
count=1;
%% Helpers
% getDist: calculate the distance between two points
% inputs: postion (x1,y1), (x2,y2)
% return: euclidean distance 
getDist = @(x1,y1,x2,y2) sqrt((x1-x2)^2+(y1-y2)^2);



for iter = 1:3000
    x_rand=[0 + (xL - 0) * rand(1,1), 0 + (yL - 0) * rand(1,1) ]; 
    %Step 1: åœ¨åœ°å›¾ä¸­éš?æœºé‡‡æ ·ä¸€ä¸ªç‚¹x_rand
    %æ??ç¤ºï¼šç”¨ï¼ˆx_rand(1),x_rand(2)ï¼‰è¡¨ç¤ºçŽ¯å¢ƒä¸­é‡‡æ ·ç‚¹çš„å??æ ‡
    
    %x_near=[];

	% todo: Kd-tree can be applied to increase efficiency. But here to simply it, a naive approach is adopted.
    %Step 2: é??åŽ†æ ‘ï¼Œä»Žæ ‘ä¸­æ‰¾åˆ°æœ€è¿‘é‚»è¿‘ç‚¹x_near 
    %æ??ç¤ºï¼šx_nearå·²ç»?åœ¨æ ‘Té‡Œ
    distArray = arrayfun(@(x) getDist(x_rand(1),x_rand(2),x.x, x.y),T.v);
	[~,idx] = min(distArray);
	x_near = [T.v(idx).x,T.v(idx).y];
	
    %x_new=[];
    %Step 3: æ‰©å±•å¾—åˆ°x_newèŠ‚ç‚¹
    %æ??ç¤ºï¼šæ³¨æ„?ä½¿ç”¨æ‰©å±•æ­¥é•¿Delta
	theta = atan2(x_rand(2)-x_near(2),x_rand(1)-x_near(1));
	x_new = [x_near(1)+Delta*cos(theta),x_near(2)+Delta*sin(theta)];
	
    %æ£€æŸ¥èŠ‚ç‚¹æ˜¯å?¦æ˜¯collision-free
    if ~collisionChecking(x_near,x_new,Imp) 
        continue;
    end
    count=count+1;
	   
    %Step 4: å°†x_newæ?’å…¥æ ‘T 
    %æ??ç¤ºï¼šæ–°èŠ‚ç‚¹x_newçš„çˆ¶èŠ‚ç‚¹æ˜¯x_near
    T.v(count).x = x_new(1);         
	T.v(count).y = x_new(2); 
	T.v(count).xPrev = x_near(1);     
	T.v(count).yPrev = x_near(2);
	T.v(count).dist=Delta;% todo constant distance?          
	T.v(count).indPrev = idx;  
	
    %Step 5:æ£€æŸ¥æ˜¯å?¦åˆ°è¾¾ç›®æ ‡ç‚¹é™„è¿‘ 
    %æ??ç¤ºï¼šæ³¨æ„?ä½¿ç”¨ç›®æ ‡ç‚¹é˜ˆå€¼Thrï¼Œè‹¥å½“å‰?èŠ‚ç‚¹å’Œç»ˆç‚¹çš„æ¬§å¼?è·?ç¦»å°?äºŽThrï¼Œåˆ™è·³å‡ºå½“å‰?forå¾ªçŽ¯
    if getDist(x_new(1),x_new(2),x_G,y_G) < Thr
		plot([x_near(1),x_new(1)],[x_near(2),x_new(2)],'r');
		hold on;
		break;
    end
	
   %Step 6:å°†x_nearå’Œx_newä¹‹é—´çš„è·¯å¾„ç”»å‡ºæ?¥
   %æ??ç¤º 1ï¼šä½¿ç”¨plotç»˜åˆ¶ï¼Œå› ä¸ºè¦?å¤šæ¬¡åœ¨å?Œä¸€å¼ å›¾ä¸Šç»˜åˆ¶çº¿æ®µï¼Œæ‰€ä»¥æ¯?æ¬¡ä½¿ç”¨plotå?Žéœ€è¦?æŽ¥ä¸Šhold onå‘½ä»¤
   %æ??ç¤º 2ï¼šåœ¨åˆ¤æ–­ç»ˆç‚¹æ?¡ä»¶å¼¹å‡ºforå¾ªçŽ¯å‰?ï¼Œè®°å¾—æŠŠx_nearå’Œx_newä¹‹é—´çš„è·¯å¾„ç”»å‡ºæ?¥
   plot([x_near(1),x_new(1)],[x_near(2),x_new(2)],'r');
   hold on;
   pause(0.1); %æš‚å?œ0.1sï¼Œä½¿å¾—RRTæ‰©å±•è¿‡ç¨‹å®¹æ˜“è§‚å¯Ÿ
   %disp(iter)
end
%% è·¯å¾„å·²ç»?æ‰¾åˆ°ï¼Œå??å?‘æŸ¥è¯¢
if iter < 2000
    path.pos(1).x = x_G; path.pos(1).y = y_G;
    path.pos(2).x = T.v(end).x; path.pos(2).y = T.v(end).y;
    pathIndex = T.v(end).indPrev; % ç»ˆç‚¹åŠ å…¥è·¯å¾„
    j=0;
    while 1
        path.pos(j+3).x = T.v(pathIndex).x;
        path.pos(j+3).y = T.v(pathIndex).y;
        pathIndex = T.v(pathIndex).indPrev;
        if pathIndex == 1
            break
        end
        j=j+1;
    end  % æ²¿ç»ˆç‚¹å›žæº¯åˆ°èµ·ç‚¹
    path.pos(end+1).x = x_I; path.pos(end).y = y_I; % èµ·ç‚¹åŠ å…¥è·¯å¾„
    for j = 2:length(path.pos)
        plot([path.pos(j).x; path.pos(j-1).x;], [path.pos(j).y; path.pos(j-1).y], 'b', 'Linewidth', 3);
    end
else
    disp('Error, no path found!');
end


